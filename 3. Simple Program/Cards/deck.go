package main

import "fmt"

// create type called 'deck'
// which is slice of strings
// why we add type?
//     if we want to create a function based on
//     the type and what its belong
type deck []string

// why this functions its not added some receiver?
// because the purposes is for declaring a new deck
// it just a simple code that initialize a new deck
func newDeck() deck {
	cards := deck{}

	cardSuits := []string{"Spades", "Hearts", "Clubs", "Diamonds"}
	cardValues := []string{
		"Two", "Three", "Four", "Five",
		"Six", "Seven", "Eight", "Nine", "Ten",
		"Jack", "Queen", "King", "Ace",
	}

	for _, suits := range cardSuits {
		for _, values := range cardValues {
			cards = append(cards, suits+" of "+values)
		}
	}

	return cards
}

// this function below has a weird naming
// (d deck) is a 'receiver' for the function
// which generated by declaring a new deck
//    cards := deck{"3 of Hearts", "5 of Spades"}
// the deck type were implementing a single memory
func (d deck) print() {
	for i, card := range d {
		fmt.Println(i, card)
	}
}
